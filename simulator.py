# -*- coding: utf-8 -*-
"""simulator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k6u15ta8IYBmS6ZsZAOgB9odyzIopneY
"""

import datetime as dt
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import math
import requests

import costdg
import costpv
import dispatchstrategy

def simulator(genNomPower, pvNomPower):

    LFdf=pd.read_csv('/content/testOuessant.csv')
    N_years = 25

    battMaxStorage, genMaxPow, battMaxInputPow, battMaxOutputPow =LFdf['Eb_max'], LFdf['Pg_max'], LFdf['Pb_max_in'], LFdf['Pb_max_out']
    SOC_min =   0
    netLoad = LFdf['Net Load']
    timeStep =  LFdf['dt']
    batteryStorage = LFdf['Eb.1']
    strategy = "1"
    Eb_next = []
    Pg = []
    for i in range(len(battMaxStorage)):
        res = dispatchstrategy.dispatchingStrategy(
            [netLoad[i], timeStep[i]], [batteryStorage[i]],
            [battMaxStorage[i], genMaxPow[i], battMaxInputPow[i],battMaxOutputPow[i] , SOC_min],
            strategy)
        Eb_next.append(res[1])
        Pg.append(res[0])

    Pg = np.tile(Pg,N_years)
    Ppv = np.tile(LFdf['Pv_Output'], N_years)

    pvCapitalCost = 51748/52 # Euros per kW

    pvReplacementCost = 0 # Euros per kW

    pvOMcost = 6690/(52*8760) # Euros per kW per hr

    pvLifetime = 219000 # hours (approx. 25 years)
    N_years = 25 # Project Lifetime in years
    N = N_years*8760 # Project Lifetime in hours

    fuelCost = 1 # Euros per Litre 

    dgCapitalCost = 950000/1900 # Euros per kW

    dgReplacementCost = 330491/1900 # Euros per kW

    dgOMcost = 598337/(1900*9760) # Euros per kW per op.Hour

    dgLifetime = 162060 # hours (approx. 18.5 years)

    discountFactor = 10.78 # Discount Factor (%)


    fuelCostGrad = 0.2359760012
    fuelCostIntercept = 28.49639941

    costDG = costdg.costAnalysisDG(Pg,
                  N_years,
                  genNomPower,
                  fuelCost,
                  dgCapitalCost,
                  dgReplacementCost,
                  dgOMcost,
                  dgLifetime,
                  discountFactor,
                  fuelCostGrad,
                  fuelCostIntercept)
    costPV = costpv.costAnalysisPV(Ppv,
                  N_years,
                  pvNomPower,
                  pvCapitalCost,
                  pvReplacementCost,
                  pvOMcost,
                  pvLifetime,
                  discountFactor)
    return costDG+costPV