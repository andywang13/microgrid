# -*- coding: utf-8 -*-
"""costWind.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gtmPqPJ91aVp0w-Md54Fx0lGiidhxNB_
"""

N_years = 25 # Project Lifetime in years
N = N_years*8760 # Project Lifetime in hours

wtCapitalCost=2000
wtReplacementCost=2000
wtOMcost=500/8760
wtLifetime=25*8760
number_of_turbines=2
capacityWT=1500000*number_of_turbines

discountFactor = 5.88 # Discount Factor (%)

i = 5 # Discount Factor (%)

import datetime as dt
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import math

pv_lifetime=[175200,[8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760]]
wt_lifetime=[175200,[8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760,8760]]

def costAnalysisWT(wt_lifetime,
                 N_years,
                 capacityWT,
                 wtCapitalCost,
                 wtReplacementCost,
                 wtOMcost,
                 wtLifetime,
                 discountFactor):
  


  def discount_factor(i,N):
    """
    Inputs:

    i: Real Discount Rate (%) Float
    N: Total Number of Project Hours

    Outputs:
    discountFactor : Array of discount factor wrt. year starting from year 0 to year N
    """
    discount = []
    for n in range(N+1):
      df = 1/((1+discountFactor/100)**n)
      discount.append(df)
    return discount

  wtReplacementNumber = math.ceil(N/wtLifetime)-1

# Create an array of total replacement costs over entire project lifespan

  def wt_replacement_cost_nominal():
    nomcost = []
    for n in range(1,1+wtReplacementNumber):
      nomcost.append(wtReplacementCost)
    return nomcost
    
  def wt_replacement_cost_discountfactor():
    wtReplacementCostDF = []
    wtLifetime_year = wtLifetime/8760

    for elem in range(1,wtReplacementNumber+1):
      dis = 1/((1+(5/100))**(wtLifetime_year*elem))
      wtReplacementCostDF.append(dis)

    return wtReplacementCostDF

  def wt_replacement_cost_discount(nomReplacementCost,replacementCostDF):
    costDiscount = np.multiply(nomReplacementCost, replacementCostDF)
    return costDiscount

  def wt_capital_cost():
    cost = wtCapitalCost*capacityWT
    return cost
  
  def wt_OM_cost():
    yearlyOpHour = wt_lifetime[1]
    omCostYearly = []
    for i in range(len(yearlyOpHour)):
      cost = yearlyOpHour[i]*capacityWT*wtOMcost
      omCostYearly.append(cost)
    return omCostYearly

  np.multiply(wt_OM_cost(),-1)

  # Only appears at the end of the project cycle
  def wt_salvage_cost_nominal():
    replacementCostDuration = math.floor(N/wtLifetime) * wtLifetime
    remaining_lifetime = wtLifetime - (N -replacementCostDuration)
    salvageValueNominal = wtReplacementCost*(remaining_lifetime/wtLifetime)
    return salvageValueNominal

  def wt_salvage_cost_discount():
    dis = 1/((1+(5/100))**N_years)
    wtSalvageValueDiscount = wt_salvage_cost_nominal() * dis
    return wtSalvageValueDiscount

  
  # CAPITAL COST
  WTcapitalCost = np.zeros(N_years+1)
# OM COST
  WTomCost = np.zeros(N_years+1)
  WTreplacementCost = np.zeros(N_years+1)
# SALVAGE COST
  WTsalvageCost = np.zeros(N_years+1)
    
# Yearly Generation kWh
  WTannualEnergy = np.ones(N_years+1)*8760*capacityWT

# CONSTRUCTING DATA TABLE
  data = {'Year of Operation': list(range(0,N_years+1)),
        'Discount Factor': discount_factor(discountFactor,N_years),
        'Capital Cost Nominal':list(WTcapitalCost),
        'Replacement Cost Nominal':np.zeros(N_years+1),
        'OM Cost Nominal':list(WTomCost),
        'Salvage Cost Nominal':list(WTsalvageCost),
        'Annual Electricity kWh': list(WTannualEnergy)}
  cashFlowTable = pd.DataFrame.from_dict(data)
  column_list = list(cashFlowTable)
  column_list = column_list[2:7]
  column_list
  WTcapitalCost[0] = -wt_capital_cost()
  WTomCost[1:N_years+1] = np.multiply(wt_OM_cost(),-1)
  WTsalvageCost[N_years] = wt_salvage_cost_nominal()

  cashFlowTable['Year of Operation'] =  list(range(0,N_years+1))
  cashFlowTable['Discount Factor'] =  discount_factor(discountFactor,N_years)
  cashFlowTable['Capital Cost Nominal'] =list(WTcapitalCost)
  cashFlowTable['Replacement Cost Nominal'] = np.zeros(N_years+1)
  cashFlowTable['OM Cost Nominal'] = list(WTomCost)
  cashFlowTable['Salvage Cost Nominal'] = list(WTsalvageCost)
  cashFlowTable['Annual Electricity kWh'] = list(WTannualEnergy)
  cashFlowTable['Total Nominal Cost'] = cashFlowTable[column_list].sum(axis=1)
# REPLACEMENT COST
  WTyearOfReplacement = []
  for i in range(1,wtReplacementNumber+1):
    fac = wtLifetime/8760
    yr = math.floor(fac*i)
    WTyearOfReplacement.append(yr)
  
  a = wt_replacement_cost_nominal()
  b = wt_replacement_cost_discountfactor()
  WTreplacementCosts = wt_replacement_cost_discount(a,b)
  for i in range(len(WTyearOfReplacement)):
    cashFlowTable['Replacement Cost Nominal'][WTyearOfReplacement[i]] = -WTreplacementCosts[i]
# ADDING IN DISCOUNTED VALUES
  cashFlowTable['Capital Cost Discount'] = cashFlowTable['Capital Cost Nominal'] * cashFlowTable['Discount Factor']
  cashFlowTable['Replacement Cost Discount'] = cashFlowTable['Replacement Cost Nominal']
  cashFlowTable['OM Cost Discount'] = cashFlowTable['OM Cost Nominal'] * cashFlowTable['Discount Factor']
  cashFlowTable['Salvage Cost Discount'] = cashFlowTable['Salvage Cost Nominal'] * cashFlowTable['Discount Factor']  
  cashFlowTable['Annual Electricity kWh Discount'] = cashFlowTable['Annual Electricity kWh'] * cashFlowTable['Discount Factor']
  cashFlowTable['Total Discounted Cost'] = cashFlowTable['Total Nominal Cost'] * cashFlowTable['Discount Factor']
  cashFlowTable['LCOE Annual'] = abs(cashFlowTable['Total Discounted Cost']) / cashFlowTable['Annual Electricity kWh Discount']
  for i in range(N_years+1):
     cashFlowTable['LCOE Annual'][i] = abs(sum(cashFlowTable['Total Discounted Cost'][0:i+1])) / sum(cashFlowTable['Annual Electricity kWh Discount'][0:i+1])


  return cashFlowTable

costAnalysisWT(wt_lifetime,
              N_years,
              capacityWT,
              wtCapitalCost,
              wtReplacementCost,
              wtOMcost,
              wtLifetime,
              discountFactor)

cashFlow = costAnalysisWT(wt_lifetime,
                        N_years,
                        capacityWT,
                        wtCapitalCost,
                        wtReplacementCost,
                        wtOMcost,
                        wtLifetime,
                        discountFactor)
npcWT = abs(sum(cashFlow['Total Discounted Cost']))
npcOutputWT = abs(sum(cashFlow['Annual Electricity kWh Discount']))
LCOE_WT = npcWT/npcOutputWT
print('The net present value of total cost is: ', npcWT, 'euros')
print('The net present value of total output is: ', npcOutputWT, 'kWh')
print('The LCOE is: ', LCOE_WT, 'euros/kWh')

